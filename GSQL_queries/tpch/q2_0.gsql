USE GRAPH tpch

DROP QUERY q2_0

CREATE QUERY q2_0() FOR GRAPH tpch {
typedef Tuple<double ACCTBAL, string S_NAME, string N_NAME, int PARTKEY, string MFGR, string ADDRESS, string PHONE, string COMMENT> resultTuple;
typedef Tuple<int ppartkey, string pmfgr> partTuple;
ListAccum<resultTuple> @result;
ListAccum<partTuple> @P_list;
SumAccum<string> @nation;
OrAccum @R_filter;
MapAccum<int, MinAccum<double>> @@minCost;
SetAccum<int> @@supp;

Start = {region.*};

// Reduction
    attrV = SELECT tgt
            FROM Start:src-(R_REGIONKEY)->:tgt
            WHERE src.R_NAME == "EUROPE"
                  ;

    tupleV = SELECT tgt
             FROM attrV:src-(N_REGIONKEY)->:tgt
             ;

    attrV  = SELECT tgt
             FROM tupleV:src-(N_NATIONKEY)->:tgt
             ;

    attrV = SELECT src
            FROM attrV:src-(S_NATIONKEY)->:tgt
            ACCUM @@supp += tgt.S_SUPPKEY
           ;
    
Start2 = {part.*};

Start2 = SELECT src
         FROM Start2:src
         WHERE src.P_SIZE == 15 AND src.P_TYPE LIKE "%BRASS"
        ;

attrV = SELECT tgt
        FROM Start2:src-(P_PARTKEY)->:tgt
        ;

attrV = SELECT src
         FROM attrV:src-(PS_PARTKEY)->:tgt
         WHERE @@supp.contains(tgt.PS_SUPPKEY)
         ACCUM @@minCost += (tgt.PS_PARTKEY -> tgt.PS_SUPPLYCOST)
             ;

    attrV = SELECT src
            FROM attrV:src-(PS_PARTKEY)->:tgt
            WHERE tgt.PS_SUPPLYCOST == @@minCost.get(src.id)
            ACCUM tgt.@R_filter = true
            ;
    
    // Collection

    attrV = SELECT src
            FROM attrV:src-(P_PARTKEY:e)->:tgt
            ACCUM src.@P_list += partTuple(tgt.P_PARTKEY, tgt.P_MFGR)
             ;

    tupleV  = SELECT tgt
              FROM attrV:src - (PS_PARTKEY:e) -> :tgt
              WHERE tgt.@R_filter
              ACCUM tgt.@P_list = src.@P_list
              POST-ACCUM src.@P_list.clear()
             ;

    attrV  = SELECT tgt
             FROM tupleV:src - (PS_SUPPKEY:e) -> :tgt
             ACCUM tgt.@P_list += src.@P_list
             ;

    // Supplier tuple vertices
    tupleV  = SELECT tgt
             FROM attrV:src - (S_SUPPKEY:e) -> :tgt
             ACCUM tgt.@P_list = src.@P_list
             ;

    attrV = SELECT tgt
            FROM tupleV:src - (S_NATIONKEY:e) -> :tgt
            ;

    attrV = SELECT src
            FROM attrV:src - (N_NATIONKEY:e) -> :tgt
            ACCUM src.@nation += tgt.N_NAME
            ;

   tupleV = SELECT src
            FROM tupleV:src - (S_NATIONKEY:e) -> :tgt
            ACCUM
                   FOREACH p in src.@P_list DO
                       src.@result += resultTuple(src.S_ACCTBAL, src.S_NAME, tgt.@nation, p.ppartkey, p.pmfgr, src.S_ADDRESS, src.S_PHONE, src.S_COMMENT)
                    END
            ;

}

INSTALL QUERY q2_0
