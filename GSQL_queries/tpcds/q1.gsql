USE GRAPH tpcds

DROP QUERY q1

CREATE QUERY q1() FOR GRAPH tpcds {
typedef Tuple<customer int, sstore int> srTuple;
MapAccum<srTuple, SumAccum<double>> @@ctr;
MapAccum<int, AvgAccum> @@avg_ctr;
OrAccum @s_filter;
SetAccum<int> @cnt_store;


//Reduction

Start2 = {date_dim.*};

    attrV (ANY) = SELECT tgt
                  FROM Start2:src - (d_date_sk)->:tgt
                  WHERE src.d_year == 2000
                  ;

    tupleV (ANY) = SELECT tgt
                   FROM attrV:src- (sr_returned_date_sk)->:tgt
                   ;


Start = {sstore.*};

    attrV  = SELECT tgt
             FROM Start:src - (s_store_sk)->:tgt
             WHERE src.s_state == "TN"
             ACCUM tgt.@s_filter = true
             ;

    tupleV = SELECT src
             FROM tupleV:src - (sr_store_sk)->:tgt
             WHERE tgt.@s_filter
             ACCUM CASE WHEN src.sr_return_amt > -1000000.0 THEN @@ctr += (srTuple(src.sr_customer_sk, src.sr_store_sk) -> src.sr_return_amt) END
             ;
 
   FOREACH (k,v) in @@ctr DO
       @@avg_ctr += (k.sstore -> v);
   END;


//Colection

   attrV = SELECT tgt
           FROM tupleV:src-(sr_customer_sk)->:tgt
           WHERE @@ctr.get(srTuple(src.sr_customer_sk,src.sr_store_sk)) > 1.2*@@avg_ctr.get(src.sr_store_sk)
           ACCUM tgt.@cnt_store += src.sr_store_sk
           ;

    tupleV  = SELECT tgt
              FROM attrV:src-(c_customer_sk)->:tgt
              ACCUM tgt.@cnt_store = src.@cnt_store
              ;


}

INSTALL QUERY q1
