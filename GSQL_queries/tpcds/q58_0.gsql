//eager aggregation
USE GRAPH tpcds

DROP QUERY q58_0

CREATE QUERY q58_0() FOR GRAPH tpcds {
SumAccum<double> @ss_item_rev, @cs_item_rev, @ws_item_rev, @ss_dev, @cs_dev, @ws_dev, @avg_all;

//Reduction
Start = {date_dim.*};

    attrV (ANY) = SELECT tgt
                  FROM Start:src- (d_week_seq)->:tgt
                  WHERE src.d_date == to_datetime("2000-01-03") 
                  ;

   tupleV (ANY) = SELECT tgt
                  FROM attrV:src- (d_week_seq)->:tgt
                  ;


   attrV = SELECT tgt
           FROM tupleV:src- (d_date_sk)->:tgt
           ;

   tupless = SELECT tgt
            FROM attrV:src - (ss_sold_date_sk)->:tgt
            ;

   tuplecs = SELECT tgt
            FROM attrV:src - (cs_sold_date_sk)->:tgt
            ;

   tuplews = SELECT tgt
            FROM attrV:src - (ws_sold_date_sk)->:tgt
            ;

//Collection

attrV = SELECT tgt
        FROM tupless:src - (ss_item_sk) -> :tgt
        ACCUM CASE WHEN src.ss_ext_sales_price > -1000000.0
                   THEN tgt.@ss_item_rev += src.ss_ext_sales_price
              END
        ;


tupleV = SELECT tgt
         FROM attrV:src - (i_item_sk) -> :tgt
         ACCUM tgt.@ss_item_rev = src.@ss_item_rev
         ;


attrss = SELECT tgt
         FROM tupleV:src - (i_item_id) -> :tgt
         ACCUM tgt.@ss_item_rev += src.@ss_item_rev
         ;

attrV = SELECT tgt
        FROM tuplecs:src - (cs_item_sk) -> :tgt
        ACCUM CASE WHEN src.cs_ext_sales_price > -1000000.0
                   THEN tgt.@cs_item_rev += src.cs_ext_sales_price
              END
       ;


tupleV = SELECT tgt
         FROM attrV:src - (i_item_sk) -> :tgt
         ACCUM tgt.@cs_item_rev = src.@cs_item_rev
         ;


attrcs = SELECT tgt
         FROM tupleV:src - (i_item_id) -> :tgt
         ACCUM tgt.@cs_item_rev += src.@cs_item_rev
         ;

attrV = SELECT tgt
        FROM tuplews:src - (ws_item_sk) -> :tgt
        ACCUM CASE WHEN src.ws_ext_sales_price > -1000000.0
                   THEN tgt.@ws_item_rev += src.ws_ext_sales_price
              END
        ;


tupleV = SELECT tgt
         FROM attrV:src - (i_item_sk) -> :tgt
         ACCUM tgt.@ws_item_rev = src.@ws_item_rev
         ;


attrws = SELECT tgt
         FROM tupleV:src - (i_item_id) -> :tgt
         ACCUM tgt.@ws_item_rev += src.@ws_item_rev
         ;

attrV = attrss INTERSECT attrcs INTERSECT attrws;

attrV = SELECT v
        FROM attrV:v
        WHERE (v.@ss_item_rev >= 0.9*v.@cs_item_rev AND v.@ss_item_rev <= 1.1*v.@cs_item_rev) AND (v.@ss_item_rev >= 0.9*v.@ws_item_rev AND v.@ss_item_rev <= 1.1*v.@ws_item_rev) AND
              (v.@cs_item_rev >= 0.9*v.@ss_item_rev AND v.@cs_item_rev <= 1.1*v.@ss_item_rev) AND (v.@cs_item_rev >= 0.9*v.@ws_item_rev AND v.@cs_item_rev <= 1.1*v.@ws_item_rev) AND
              (v.@ws_item_rev >= 0.9*v.@ss_item_rev AND v.@ws_item_rev <= 1.1*v.@ss_item_rev) AND (v.@ws_item_rev >= 0.9*v.@cs_item_rev AND v.@ws_item_rev <= 1.1*v.@cs_item_rev)
              ;

attrV = SELECT v
        FROM attrV:v
        ACCUM 
              v.@ss_dev = v.@ss_item_rev/((v.@ss_item_rev+v.@cs_item_rev+v.@ws_item_rev)/3) * 100,
              v.@cs_dev = v.@cs_item_rev/((v.@ss_item_rev+v.@cs_item_rev+v.@ws_item_rev)/3) * 100,
              v.@ws_dev = v.@ws_item_rev/((v.@ss_item_rev+v.@cs_item_rev+v.@ws_item_rev)/3) * 100,
              v.@avg_all = (v.@ss_item_rev+v.@cs_item_rev+v.@ws_item_rev)/3
              ;

}

INSTALL QUERY q58_0
