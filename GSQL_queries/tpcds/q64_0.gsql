USE GRAPH tpcds

DROP QUERY q64_0

CREATE QUERY q64_0() FOR GRAPH tpcds {
SetAccum<int> @@y1999, @@y2000, @@hd;
MapAccum<int,int> @@dmap;
MapAccum<int,string> @@imap, @@smap, @@ca, @@cd;
SumAccum<double> @sales,@refund; 
GroupByAccum<int cust, SumAccum<int> cd, SumAccum<int> d2, SumAccum<int> d3, SumAccum<int> ca2> @@customers;  
GroupByAccum<string product, int item, string sname, string ca1, string ca2, int fsyear, int s2year, SumAccum<int> cnt, SumAccum<double> s1, SumAccum<double> s2, SumAccum<double> s3> @@cross_sales1, @@cross_sales2;
GroupByAccum<string product, string sname, string ca1, string ca2, int syear1, int syear2, int cnt1, int cnt2, double s11, double s21, double s31, double s12, double s22, double s32, SumAccum<int> cnt_t> @@result;

Start4 = {income_band.*};
attrV = SELECT tgt
        FROM Start4:src- (ib_income_band_sk)->:tgt
        ;

attrV = SELECT src
        FROM attrV:src- (hd_income_band_sk)->:tgt
        ACCUM @@hd += tgt.hd_demo_sk
        ;

Start3 = {sstore.*};

Start3 = SELECT src
         FROM Start3:src
         WHERE src.s_zip != "NULL"
         ACCUM @@smap += (src.s_store_sk -> src.s_store_name + "," + src.s_zip)
         ;

Start2 = {date_dim.*};

Start2 = SELECT src
         FROM Start2:src
         ACCUM @@dmap += (src.d_date_sk -> src.d_year),
              CASE WHEN src.d_year == 1999 THEN @@y1999 += src.d_date_sk END,
              CASE WHEN src.d_year == 2000 THEN @@y2000 += src.d_date_sk END
        ;


Start = {item.*};

attrV = SELECT tgt
        FROM Start:src- (i_item_sk)->:tgt
        WHERE src.i_color IN ("purple","burlywood","indian","spring","floral","medium") AND
              src.i_current_price >= 65 AND src.i_current_price <= 74 
        ;


tupleV = SELECT tgt
         FROM attrV:src- (cs_item_sk)->:tgt
         WHERE tgt.outdegree("cs_cr_order_item") > 0
         ;

tupleV = SELECT src
         FROM tupleV:src- (cs_cr_order_item)->:tgt
         WHERE tgt.cr_refunded_cash > -1000000.0 AND tgt.cr_reversed_charge > -1000000.0 
               AND tgt.cr_store_credit > -1000000.0 AND src.cs_ext_list_price > -1000000.0
         
         ACCUM CASE WHEN tgt.cr_refunded_cash > -1000000.0 AND tgt.cr_reversed_charge > -1000000.0
               AND tgt.cr_store_credit > -1000000.0 
               THEN src.@refund += tgt.cr_refunded_cash + tgt.cr_reversed_charge + tgt.cr_store_credit END,
               CASE WHEN src.cs_ext_list_price > -1000000.0 
               THEN src.@sales += src.cs_ext_list_price END
         ;

attrV = SELECT tgt
        FROM tupleV:src- (cs_item_sk)->:tgt
        ACCUM tgt.@refund += src.@refund, tgt.@sales += src.@sales
        HAVING tgt.@sales > 2*tgt.@refund
        ;

attrV = SELECT src
        FROM attrV:src- (i_item_sk)->:tgt
        ACCUM @@imap += (src.id -> tgt.i_product_name)
        ;

tuple_ss = SELECT tgt
         FROM attrV:src- (ss_item_sk)->:tgt
         WHERE tgt.outdegree("ss_sr_ticket_item") > 0 AND tgt.outdegree("ss_promo_sk") > 0 AND tgt.outdegree("ss_store_sk") > 0
               AND tgt.outdegree("ss_cdemo_sk") > 0 AND tgt.outdegree("ss_addr_sk") > 0 AND tgt.outdegree("ss_hdemo_sk") > 0
               AND tgt.outdegree("ss_customer_sk") > 0 AND (@@y1999.contains(tgt.ss_sold_date_sk) OR @@y2000.contains(tgt.ss_sold_date_sk))
               AND @@hd.contains(tgt.ss_hdemo_sk) AND @@smap.containsKey(tgt.ss_store_sk)
               ;

attrV = SELECT tgt
        FROM tuple_ss:src- (ss_addr_sk)->:tgt
        ;

attrV = SELECT src
        FROM attrV:src- (ca_address_sk)->:tgt
        ACCUM @@ca += (src.id -> tgt.ca_street_number + "," +tgt.ca_street_name +","+tgt.ca_city+","+tgt.ca_zip)
        ;

attrV = SELECT tgt
        FROM tuple_ss:src- (ss_cdemo_sk)->:tgt
        ;

attrV = SELECT src
        FROM attrV:src- (cd_demo_sk)->:tgt
        ACCUM @@cd += (src.id -> tgt.cd_marital_status)
        ;

attrV = SELECT tgt
        FROM tuple_ss:src- (ss_customer_sk)->:tgt
        ;

tupleV = SELECT tgt
         FROM attrV:src- (c_customer_sk)->:tgt
         WHERE tgt.outdegree("c_first_sales_date_sk") > 0 AND tgt.outdegree("c_first_shipto_date_sk") > 0
               AND tgt.outdegree("c_current_cdemo_sk") > 0 AND tgt.outdegree("c_current_hdemo_sk") > 0
               AND tgt.outdegree("c_current_addr_sk") > 0 AND @@hd.contains(tgt.c_current_hdemo_sk)
         ACCUM @@customers += (src.id -> tgt.c_current_cdemo_sk, tgt.c_first_sales_date_sk, tgt.c_first_shipto_date_sk, tgt.c_current_addr_sk)
        ;


attrV = SELECT tgt
        FROM tupleV:src- (c_current_addr_sk)->:tgt 
        ;

attrV = SELECT src
        FROM attrV:src- (ca_address_sk)->:tgt
        WHERE NOT @@ca.containsKey(src.id)
        ACCUM @@ca += (src.id -> tgt.ca_street_number + "," +tgt.ca_street_name +","+tgt.ca_city+","+tgt.ca_zip)
        ;

attrV = SELECT tgt
        FROM tupleV:src- (c_current_cdemo_sk)->:tgt
        ;

attrV = SELECT src
        FROM attrV:src- (cd_demo_sk)->:tgt
        WHERE NOT @@cd.containsKey(src.id)
        ACCUM @@cd += (src.id -> tgt.cd_marital_status)
        ;


tupleV = SELECT src
         FROM tuple_ss:src
         WHERE @@customers.containsKey(src.ss_customer_sk) AND @@y1999.contains(src.ss_sold_date_sk)
                 AND @@cd.get(src.ss_cdemo_sk) != @@cd.get(@@customers.get(src.ss_customer_sk).cd)
           ACCUM @@cross_sales1 += (@@imap.get(src.ss_item_sk), src.ss_item_sk, @@smap.get(src.ss_store_sk), @@ca.get(src.ss_addr_sk), @@ca.get(@@customers.get(src.ss_customer_sk).ca2), @@dmap.get(@@customers.get(src.ss_customer_sk).d2), @@dmap.get(@@customers.get(src.ss_customer_sk).d3) -> 1, 0, 0, 0),
                 CASE WHEN src.ss_wholesale_cost > -1000000.0 THEN
                 @@cross_sales1 += (@@imap.get(src.ss_item_sk), src.ss_item_sk, @@smap.get(src.ss_store_sk), @@ca.get(src.ss_addr_sk), @@ca.get(@@customers.get(src.ss_customer_sk).ca2), @@dmap.get(@@customers.get(src.ss_customer_sk).d2), @@dmap.get(@@customers.get(src.ss_customer_sk).d3) -> 0, src.ss_wholesale_cost, 0, 0) END,
                 CASE WHEN src.ss_list_price > -1000000.0 THEN
                 @@cross_sales1 += (@@imap.get(src.ss_item_sk), src.ss_item_sk, @@smap.get(src.ss_store_sk), @@ca.get(src.ss_addr_sk), @@ca.get(@@customers.get(src.ss_customer_sk).ca2), @@dmap.get(@@customers.get(src.ss_customer_sk).d2), @@dmap.get(@@customers.get(src.ss_customer_sk).d3) -> 0, 0, src.ss_list_price, 0) END,
                 CASE WHEN src.ss_coupon_amt > -1000000.0 THEN
                 @@cross_sales1 += (@@imap.get(src.ss_item_sk), src.ss_item_sk, @@smap.get(src.ss_store_sk), @@ca.get(src.ss_addr_sk), @@ca.get(@@customers.get(src.ss_customer_sk).ca2), @@dmap.get(@@customers.get(src.ss_customer_sk).d2), @@dmap.get(@@customers.get(src.ss_customer_sk).d3) -> 0, 0, 0, src.ss_coupon_amt) END
           ;

tupleV = SELECT src
           FROM tuple_ss:src
           WHERE @@customers.containsKey(src.ss_customer_sk) AND @@y2000.contains(src.ss_sold_date_sk)
                 AND @@cd.get(src.ss_cdemo_sk) != @@cd.get(@@customers.get(src.ss_customer_sk).cd)
           ACCUM @@cross_sales2 += (@@imap.get(src.ss_item_sk), src.ss_item_sk, @@smap.get(src.ss_store_sk), @@ca.get(src.ss_addr_sk), @@ca.get(@@customers.get(src.ss_customer_sk).ca2), @@dmap.get(@@customers.get(src.ss_customer_sk).d2), @@dmap.get(@@customers.get(src.ss_customer_sk).d3) -> 1, 0, 0, 0),
                 CASE WHEN src.ss_wholesale_cost > -1000000.0 THEN
                 @@cross_sales2 += (@@imap.get(src.ss_item_sk), src.ss_item_sk, @@smap.get(src.ss_store_sk), @@ca.get(src.ss_addr_sk), @@ca.get(@@customers.get(src.ss_customer_sk).ca2), @@dmap.get(@@customers.get(src.ss_customer_sk).d2), @@dmap.get(@@customers.get(src.ss_customer_sk).d3) -> 0, src.ss_wholesale_cost, 0, 0) END,
                 CASE WHEN src.ss_list_price > -1000000.0 THEN
                 @@cross_sales2 += (@@imap.get(src.ss_item_sk), src.ss_item_sk, @@smap.get(src.ss_store_sk), @@ca.get(src.ss_addr_sk), @@ca.get(@@customers.get(src.ss_customer_sk).ca2), @@dmap.get(@@customers.get(src.ss_customer_sk).d2), @@dmap.get(@@customers.get(src.ss_customer_sk).d3) -> 0, 0, src.ss_list_price, 0) END,
                 CASE WHEN src.ss_coupon_amt > -1000000.0 THEN
                 @@cross_sales2 += (@@imap.get(src.ss_item_sk), src.ss_item_sk, @@smap.get(src.ss_store_sk), @@ca.get(src.ss_addr_sk), @@ca.get(@@customers.get(src.ss_customer_sk).ca2), @@dmap.get(@@customers.get(src.ss_customer_sk).d2), @@dmap.get(@@customers.get(src.ss_customer_sk).d3) -> 0, 0, 0, src.ss_coupon_amt) END
           ;


FOREACH (k1,k2,k3,k4,k5,k6,k7,v1,v2,v3,v4) IN @@cross_sales1 DO
  FOREACH (kk1,kk2,kk3,kk4,kk5,kk6,kk7,vv1,vv2,vv3,vv4) IN @@cross_sales2 DO
     IF k2 == kk2 AND k3 == kk3 AND vv1 <= v1 THEN 
       @@result += (k1,k3,k4,k5,1999,2000,v1,vv1,v2,v3,v4,vv2,vv3,vv4 -> 1);
     END;
  END;
END;


}

INSTALL QUERY q64_0
