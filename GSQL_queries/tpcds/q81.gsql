USE GRAPH tpcds

DROP QUERY q81

CREATE QUERY q81() FOR GRAPH tpcds {
typedef Tuple<customer int, state string> srTuple;
typedef Tuple<string cid, string salut, string fname, string lname, string ca, double creturn> resTuple;
ListAccum<resTuple> @result;
MapAccum<srTuple, SumAccum<double>> @@ctr;
MapAccum<string, AvgAccum> @@avg_ctr;
SumAccum<string> @state;
SumAccum<string> @addr;
SetAccum<string> @cnt_state;
OrAccum @c_filter;

//Reduction

Start = {date_dim.*};

    attrV (ANY) = SELECT tgt
                  FROM Start:src - (d_date_sk)->:tgt
                  WHERE src.d_year == 2000
                  ;

    tupleV (ANY) = SELECT tgt
                   FROM attrV:src - (cr_returned_date_sk)->:tgt
                   ;

Start2 = {customer_address.*};

attrV = SELECT tgt
        FROM Start2:src - (ca_address_sk)->:tgt
        WHERE src.ca_state != "NULL"
        ACCUM tgt.@state = src.ca_state, CASE WHEN src.ca_state == "GA" THEN tgt.@c_filter = true END
        ;

   tupleV = SELECT src
            FROM tupleV:src - (cr_returning_addr_sk)->:tgt
            WHERE tgt.@state != ""
            ACCUM CASE WHEN src.cr_return_amt_inc_tax > -1000000.0 THEN @@ctr += (srTuple(src.cr_returning_customer_sk,tgt.@state) -> src.cr_return_amt_inc_tax) END
                  , src.@state = tgt.@state
            ;
 
   FOREACH (k,v) in @@ctr DO
       @@avg_ctr += (k.state -> v);
   END;


   attrV = SELECT tgt
           FROM tupleV:src-(cr_returning_customer_sk)->:tgt
           WHERE @@ctr.get(srTuple(src.cr_returning_customer_sk,src.@state)) > 1.2*@@avg_ctr.get(src.@state)
           ACCUM tgt.@cnt_state += src.@state;

    tupleV  = SELECT tgt
              FROM attrV:src-(c_customer_sk)->:tgt
              ACCUM tgt.@cnt_state = src.@cnt_state
                    ;

   attrV = SELECT tgt
            FROM tupleV:src-(c_current_addr_sk)->:tgt
            WHERE tgt.@c_filter
            ACCUM src.@c_filter = true
            ;

//Colection

  attrV = SELECT src
          FROM attrV:src-(ca_address_sk)->:tgt
          ACCUM src.@addr += tgt.ca_street_number + "," + tgt.ca_street_name + ","
                             + tgt.ca_street_type + "," + tgt.ca_suite_number + "," + tgt.ca_city + "," + tgt.ca_county + ","
                             + tgt.ca_state + "," + tgt.ca_zip + "," + tgt.ca_country + "," + to_string(tgt.ca_gmt_offset) + "," + tgt.ca_location_type
          ;


  tupleV = SELECT tgt
           FROM attrV:src-(c_current_addr_sk)->:tgt
           WHERE tgt.@c_filter
           ACCUM FOREACH s IN tgt.@cnt_state DO
                   tgt.@result += resTuple(tgt.c_customer_id, tgt.c_salutation, tgt.c_first_name, tgt.c_last_name, src.@addr, @@ctr.get(srTuple(tgt.c_customer_sk,s)))
                 END
           ;

}

INSTALL QUERY q81
