USE GRAPH tpcds

DROP QUERY q77

CREATE QUERY q77() FOR GRAPH tpcds {
typedef Tuple<string channel,string iid, double sales, double returnss, double profit> resTuple;
ListAccum<resTuple> @@result;
SumAccum<double> @s_sales, @s_profit, @s_returns, @c_sales, @c_profit, @w_sales, @w_profit, @w_returns;
SumAccum<double> @@store_sales, @@store_profit, @@store_returns, 
                 @@catalog_sales, @@catalog_profit, @@catalog_returns,
                 @@web_sales, @@web_profit, @@web_returns,
                 @@total_sales, @@total_profit, @@total_returns;

SumAccum<double> @@c_null_sales, @@c_null_profit, @@c_returns, @@c_profit_loss;
SumAccum<int> @@cr_counter, @@cr_centers;


Start = {attribute_date.*};

tupleV = SELECT tgt
         FROM Start:src - (d_date)->:tgt
         WHERE src.id >= to_datetime("2000-08-23") AND src.id <= to_datetime("2000-09-22 00:00:00.000")
         ;


attrV = SELECT tgt
        FROM tupleV:src - (d_date_sk)->:tgt
        ;

tuple_sr (ANY) = SELECT tgt
                 FROM attrV:src -(sr_returned_date_sk)->:tgt
                 ;

tuple_sr = SELECT src
           FROM tuple_sr:src -(sr_store_sk)->:tgt
           ACCUM CASE WHEN src.sr_return_amt > -1000000.0
                    THEN tgt.@s_returns += src.sr_return_amt END,
                 CASE WHEN src.sr_net_loss > -1000000.0
                    THEN tgt.@s_profit += -1*src.sr_net_loss END
         ;

tuple_ss = SELECT tgt
           FROM attrV:src -(ss_sold_date_sk)->:tgt
           ;

attr_s = SELECT tgt
         FROM tuple_ss:src -(ss_store_sk)->:tgt
         ACCUM CASE WHEN src.ss_ext_sales_price > -1000000.0
                    THEN tgt.@s_sales += src.ss_ext_sales_price END,
               CASE WHEN src.ss_net_profit > -1000000.0
                    THEN tgt.@s_profit += src.ss_net_profit END
         ;


tuple_wr (ANY) = SELECT tgt
                 FROM attrV:src -(wr_returned_date_sk)->:tgt
                 ;

tuple_wr = SELECT src
           FROM tuple_wr:src -(wr_web_page_sk)->:tgt
           ACCUM CASE WHEN src.wr_return_amt > -1000000.0
                    THEN tgt.@w_returns += src.wr_return_amt END,
               CASE WHEN src.wr_net_loss > -1000000.0
                    THEN tgt.@w_profit += -1*src.wr_net_loss END
           ;

tuple_ws = SELECT tgt
           FROM attrV:src -(ws_sold_date_sk)->:tgt
           ;

attr_w = SELECT tgt
         FROM tuple_ws:src -(ws_web_page_sk)->:tgt
         ACCUM CASE WHEN src.ws_ext_sales_price > -1000000.0
                    THEN tgt.@w_sales += src.ws_ext_sales_price END,
               CASE WHEN src.ws_net_profit > -1000000.0
                    THEN tgt.@w_profit += src.ws_net_profit END
         ;



tuple_cr = SELECT tgt
           FROM attrV:src -(cr_returned_date_sk)->:tgt
           ACCUM CASE WHEN tgt.cr_return_amount > -1000000.0
                            THEN @@c_returns += tgt.cr_return_amount END,
                 CASE WHEN tgt.cr_net_loss > -1000000.0
                            THEN @@c_profit_loss += tgt.cr_net_loss END
           , @@cr_centers += tgt.cr_call_center_sk
            ;

//to find out how many call center in catalog returns then to use to do cartesian product with catalog sales, i.e. multiply each call center from catalog sales to this number
@@cr_counter = @@cr_centers.size();


tuple_cs = SELECT tgt
           FROM attrV:src -(cs_sold_date_sk)->:tgt
           ACCUM CASE WHEN tgt.cs_call_center_sk == -1 AND tgt.cs_ext_sales_price > -1000000.0
                            THEN @@c_null_sales += tgt.cs_ext_sales_price END,
                       CASE WHEN tgt.cs_call_center_sk == -1 AND tgt.cs_net_profit > -1000000.0
                            THEN @@c_null_profit += tgt.cs_net_profit END
                       ;

@@c_null_sales = @@c_null_sales * @@cr_counter;
@@c_null_profit = (@@c_null_profit * @@cr_counter) - @@c_profit_loss;

attr_c = SELECT tgt
         FROM tuple_cs:src -(cs_call_center_sk)->:tgt
         ACCUM CASE WHEN src.cs_ext_sales_price > -1000000.0
                    THEN tgt.@c_sales += src.cs_ext_sales_price END,
               CASE WHEN src.cs_net_profit > -1000000.0
                    THEN tgt.@c_profit += src.cs_net_profit END
         POST-ACCUM tgt.@c_sales = tgt.@c_sales * @@cr_counter,
                    tgt.@c_profit = tgt.@c_profit * @@cr_counter - @@c_profit_loss
         ;


//Construct final output tuples
attr_c = SELECT src
         FROM attr_c:src
         ACCUM @@catalog_sales += src.@c_sales, @@catalog_profit += src.@c_profit
               ,@@result += resTuple("catalog channel", to_string(src.id), src.@c_sales, @@c_returns, src.@c_profit)
         ;

@@catalog_sales = @@catalog_sales + @@c_null_sales;
@@catalog_returns = @@c_returns * (attr_c.size() + 1);
@@catalog_profit = @@catalog_profit + @@c_null_profit;

@@result += resTuple("catalog channel","NULL", @@c_null_sales, @@c_returns, @@c_null_profit);
@@result += resTuple("catalog channel","NULL", @@catalog_sales, @@catalog_returns, @@catalog_profit);

attr_s = SELECT src
         FROM attr_s:src
         ACCUM @@store_sales += src.@s_sales, @@store_returns += src.@s_returns, @@store_profit += src.@s_profit
               ,@@result += resTuple("store channel", to_string(src.id), src.@s_sales, src.@s_returns, src.@s_profit)
         ;

@@result += resTuple("store channel", "NULL", @@store_sales, @@store_returns, @@store_profit);

attr_w = SELECT src
         FROM attr_w:src
         ACCUM @@web_sales += src.@w_sales, @@web_returns += src.@w_returns, @@web_profit += src.@w_profit
               ,@@result += resTuple("web channel", to_string(src.id), src.@w_sales, src.@w_returns, src.@w_profit)
         ;

@@result += resTuple("web channel", "NULL", @@web_sales, @@web_returns, @@web_profit);

@@total_sales = @@catalog_sales + @@store_sales + @@web_sales;
@@total_returns = @@catalog_returns + @@store_returns + @@web_returns;
@@total_profit = @@catalog_profit + @@store_profit + @@web_profit;

@@result += resTuple("NULL", "NULL", @@total_sales, @@total_returns, @@total_profit);

}

INSTALL QUERY q77
