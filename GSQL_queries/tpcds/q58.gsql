USE GRAPH tpcds

DROP QUERY q58

CREATE QUERY q58() FOR GRAPH tpcds {
SumAccum<double> @ss_item_rev, @cs_item_rev, @ws_item_rev, @ss_dev, @cs_dev, @ws_dev, @avg_all;
OrAccum @d_filter;

//Reduction
Start = {date_dim.*};

    attrV (ANY) = SELECT tgt
                  FROM Start:src- (d_week_seq)->:tgt
                  WHERE src.d_date == to_datetime("2000-01-03") 
                  ;

   tupleV (ANY) = SELECT tgt
                  FROM attrV:src- (d_week_seq)->:tgt
                  ;


   attrd = SELECT tgt
           FROM tupleV:src- (d_date_sk)->:tgt
           ;

   tupless = SELECT tgt
             FROM attrd:src - (ss_sold_date_sk)->:tgt
             ACCUM tgt.@d_filter = true
             ;

   attrV = SELECT tgt
           FROM tupless:src - (ss_item_sk) -> :tgt
           ;

tupleV = SELECT tgt
         FROM attrV:src - (i_item_sk) -> :tgt
         ;

attrss = SELECT tgt
         FROM tupleV:src - (i_item_id) -> :tgt
         ;

   tuplecs = SELECT tgt
             FROM attrd:src - (cs_sold_date_sk)->:tgt
             ACCUM tgt.@d_filter = true
             ;
   
   attrV = SELECT tgt
           FROM tuplecs:src - (cs_item_sk) -> :tgt
       ;

tupleV = SELECT tgt
         FROM attrV:src - (i_item_sk) -> :tgt
         ;


attrcs = SELECT tgt
         FROM tupleV:src - (i_item_id) -> :tgt
         ;

   tuplews = SELECT tgt
             FROM attrd:src - (ws_sold_date_sk)->:tgt
             ACCUM tgt.@d_filter = true
             ;

attrV = SELECT tgt
        FROM tuplews:src - (ws_item_sk) -> :tgt
        ;

tupleV = SELECT tgt
         FROM attrV:src - (i_item_sk) -> :tgt
         ;

attrws = SELECT tgt
         FROM tupleV:src - (i_item_id) -> :tgt
         ;

attrV = attrss INTERSECT attrcs INTERSECT attrws;

//Collection
tupleV = SELECT tgt
         FROM attrV:src - (i_item_id) -> :tgt
         ;

attrV = SELECT tgt
        FROM tupleV:src - (i_item_sk) -> :tgt
        ;

attrV = SELECT src
        FROM attrV:src - ((ss_item_sk|cs_item_sk|ws_item_sk):e) -> :tgt
        WHERE tgt.@d_filter
        ACCUM CASE e.type
           WHEN "ss_item_sk" THEN
              CASE WHEN tgt.ss_ext_sales_price > -1000000.0
                   THEN src.@ss_item_rev += tgt.ss_ext_sales_price END
           WHEN "cs_item_sk" THEN
              CASE WHEN tgt.cs_ext_sales_price > -1000000.0
                   THEN src.@cs_item_rev += tgt.cs_ext_sales_price END
           WHEN "ws_item_sk" THEN
              CASE WHEN tgt.ws_ext_sales_price > -1000000.0
                   THEN src.@ws_item_rev += tgt.ws_ext_sales_price END
        END
        ;

tupleV = SELECT tgt
         FROM attrV:src - (i_item_sk) -> :tgt
         ACCUM tgt.@ss_item_rev = src.@ss_item_rev,
               tgt.@cs_item_rev = src.@cs_item_rev,
               tgt.@ws_item_rev = src.@ws_item_rev
           ;


attrV = SELECT tgt
         FROM tupleV:src - (i_item_id) -> :tgt
         ACCUM tgt.@ss_item_rev += src.@ss_item_rev,
               tgt.@cs_item_rev += src.@cs_item_rev,
               tgt.@ws_item_rev += src.@ws_item_rev 
         HAVING (tgt.@ss_item_rev >= 0.9*tgt.@cs_item_rev AND tgt.@ss_item_rev <= 1.1*tgt.@cs_item_rev) AND (tgt.@ss_item_rev >= 0.9*tgt.@ws_item_rev AND tgt.@ss_item_rev <= 1.1*tgt.@ws_item_rev) AND
              (tgt.@cs_item_rev >= 0.9*tgt.@ss_item_rev AND tgt.@cs_item_rev <= 1.1*tgt.@ss_item_rev) AND (tgt.@cs_item_rev >= 0.9*tgt.@ws_item_rev AND tgt.@cs_item_rev <= 1.1*tgt.@ws_item_rev) AND
              (tgt.@ws_item_rev >= 0.9*tgt.@ss_item_rev AND tgt.@ws_item_rev <= 1.1*tgt.@ss_item_rev) AND (tgt.@ws_item_rev >= 0.9*tgt.@cs_item_rev AND tgt.@ws_item_rev <= 1.1*tgt.@cs_item_rev)
          ;

attrV = SELECT v
        FROM attrV:v
        ACCUM 
              v.@ss_dev = v.@ss_item_rev/((v.@ss_item_rev+v.@cs_item_rev+v.@ws_item_rev)/3) * 100,
              v.@cs_dev = v.@cs_item_rev/((v.@ss_item_rev+v.@cs_item_rev+v.@ws_item_rev)/3) * 100,
              v.@ws_dev = v.@ws_item_rev/((v.@ss_item_rev+v.@cs_item_rev+v.@ws_item_rev)/3) * 100,
              v.@avg_all = (v.@ss_item_rev+v.@cs_item_rev+v.@ws_item_rev)/3
              ;

}

INSTALL QUERY q58
